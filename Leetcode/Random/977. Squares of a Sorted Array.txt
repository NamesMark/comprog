class Solution {
    public int[] sortedSquares(int[] nums) {
        if (nums.length == 1) {
            return new int[] {(int) Math.pow(nums[0],2)};
        }
        int negCnt = 0;
        for (int i = 0; i < nums.length && nums[i]<0; i++) {
            negCnt++;
        }
        
        int[] negative = new int[negCnt];
        
        for (int i = 0; i<negCnt; i++) {
            negative[i]=(int) Math.pow(nums[i], 2);
        }
        
        int pp = negCnt;
        int pn = negCnt-1;
        int writer = 0;
        
        while (writer < nums.length && pn >= 0 && pp < nums.length) {
            if (negative[pn] <= (int) Math.pow(nums[pp], 2)) {
                nums[writer] = negative[pn];
                writer++;
                pn--;
            } else {
                nums[writer] = (int) Math.pow(nums[pp], 2);
                writer++;
                pp++;
            }
        }
        
        if (pn < 0) {
            for (int i = writer; i < nums.length && pp < nums.length; i++) {
                nums[i] = (int) Math.pow(nums[pp], 2);
                pp++;
            }
        } else {
            for (int i = writer; i < nums.length && pn >= 0; i++) {
                nums[i] = negative[pn];
                pn--;
            }
        }

        return nums;
    }
}